var xuljet = require('lib/xuljet');exports.BoxLayout = function(aWindow){  xuljet.Component.call(this, aWindow);    this.img = xuljet.imagesURI+'folder_yellow_open.png';}xuljet.inherits(exports.BoxLayout, xuljet.Component);  exports.BoxLayout.prototype.renderFlexines = function(xul){  with (xul)  {  groupbox(    caption({label: 'flexiness'}),    hbox(    button({label: 'No Flex'}),    button({label: 'No Flex'}),    button({label: 'No Flex'}),    button({label: 'No Flex'}),    button({label: 'No Flex'})),    hbox(    button({label: 'There\'s a'}),    button({label: 'spacer'}),    spacer({flex: 1}),    button({label: 'in the'}),    button({label: 'middle'})),    hbox(    button({label: 'This spacer ->'}),    spacer({flex: 2}),    button({label: 'is bigger than this spacer, ->'}),    spacer({flex: 1}),    button({label: 'so there!'})),    hbox(    button({label: 'No Flex'}),    button({label: 'No Flex'}),    button({flex: 1, label: 'flex=1'}),    button({label: 'No Flex'}),    button({label: 'No Flex'})),    hbox(    button({flex: 1, label: 'flex=1'}),    button({flex: 2, label: 'flex=2'}),    button({flex: 3, label: 'flex=3'}),    button({flex: 4, label: 'flex=4'}),    button({flex: 5, label: 'flex=5'})),    hbox(    button({flex: 1, label: 'flex=1'}),    button({flex: 1, label: 'flex=1'}),    button({flex: 1, label: 'flex=1'}),    button({flex: 1, label: 'flex=1'}),    button({flex: 1, label: 'flex=1'})))  }}    exports.BoxLayout.prototype.renderDirection = function(xul){  with (xul)  {  groupbox(    caption({label: 'direction'}),    hbox({dir: 'forward'},    button({label: 'Here'}),    button({label: 'the'}),    button({label: 'direction'}),    button({label: 'is'}),    button({label: 'forward'})),    hbox({dir: 'reverse'},    button({label: 'Here'}),    button({label: 'the'}),    button({label: 'direction'}),    button({label: 'is'}),    button({label: 'forward'})),    hbox(    button({ordinal: 4, label: 'Here the'}),    button({ordinal: 1, label: 'ordinal'}),    button({ordinal: 3, label: 'attribute'}),    button({ordinal: 2, label: 'sets the order'}))  )  }}     exports.BoxLayout.prototype.renderPacking = function(xul){  with (xul)  {  groupbox(    caption({label: 'packing'}),    hbox({pack: 'start'},    button({label: 'Here'}),    button({label: 'the'}),    button({label: 'packing'}),    button({label: 'is'}),    button({label: 'start'})),    hbox({pack: 'center'},    button({label: 'Here'}),    button({label: 'the'}),    button({label: 'packing'}),    button({label: 'is'}),    button({label: 'center'})),    hbox({pack: 'end'},    button({label: 'Here'}),    button({label: 'the'}),    button({label: 'packing'}),    button({label: 'is'}),    button({label: 'end'})),    hbox({pack: 'start'},    button({label: 'Here'}),    button({label: 'the'}),    button({label: 'yelds'}),    button({label: 'to'}),    button({label: 'flex', flex: 1}))  )  }}    exports.BoxLayout.prototype.renderAlignment = function(xul){  with (xul)  {  groupbox(    caption({label: 'alignment'}),    hbox({align: 'start'},    button({label: 'Here', image: this.img, orient: 'vertical'}),    button({orient: 'vertical'}, label('the'), label('alignment')),    button({label: 'is', image: this.img}),    button({label: 'start'})),    hbox({align: 'center'},    button({label: 'Here', image: this.img, orient: 'vertical'}),    button({orient: 'vertical'}, label('the'), label('alignment')),    button({label: 'is', image: this.img}),    button({label: 'center'})),    hbox({align: 'end'},    button({label: 'Here', image: this.img, orient: 'vertical'}),    button({orient: 'vertical'}, label('the'), label('alignment')),    button({label: 'is', image: this.img}),    button({label: 'end'})),    hbox({align: 'baseline'},    button({label: 'Here', image: this.img, orient: 'vertical'}),    button({orient: 'vertical'}, label('the'), label('alignment')),    button({label: 'is', image: this.img}),    button({label: 'baseline'})),    hbox({align: 'stretch'},    button({label: 'Here', image: this.img, orient: 'vertical'}),    button({orient: 'vertical'}, label('the'), label('alignment')),    button({label: 'is', image: this.img}),    button({label: 'stretch'}))  )  }}    exports.BoxLayout.prototype.renderEquality = function(xul){  with (xul)  {  groupbox({orient: 'horizontal'},    caption({label: 'euality'}),    vbox({equalsize: 'always'},    button({label: 'Here', image: this.img, orient: 'vertical'}),    button({orient: 'vertical'}, label('the'), label('equalsize'), label('attribute')),    button({label: 'is', image: this.img}),    button({label: 'always'})),    vbox({equalsize: 'never'},    button({label: 'Here', image: this.img, orient: 'vertical'}),    button({orient: 'vertical'}, label('the'), label('equalsize'), label('attribute')),    button({label: 'is', image: this.img}),    button({label: 'never'}))  )  }}exports.BoxLayout.prototype.renderHiddeness = function(xul){  with (xul)  {  groupbox(    caption({label: 'hiddeness'}),    hbox(label('Every other button in the line below is hidden')),    hbox({equalsize: 'always'},    button({label: 'Every'}),    button({label: 'other', hidden: true}),    button({label: 'button'}),    button({label: 'in', hidden: true}),    button({label: 'the'}),    button({label: 'line', hidden: true}),    button({label: 'below'}),    button({label: 'is', hidden: true}),    button({label: 'hidden'})))  }}      exports.BoxLayout.prototype.render = function(xul){  with (xul)  {  vbox({flex: 1, style: 'overflow: auto'},     xul.HTML().h1('Box Layout'),    insert(this.renderFlexines),    insert(this.renderDirection),    insert(this.renderPacking),    insert(this.renderAlignment),    insert(this.renderEquality),    insert(this.renderHiddeness)  )  }}