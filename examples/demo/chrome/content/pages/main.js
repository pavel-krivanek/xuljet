var xuljet = require('lib/xuljet');var printing = require('lib/printing');var demoButtons = require('pages/buttons');var demoForms = require('pages/forms');var demoBoxLayout = require('pages/boxlayout');var demoColorpickers = require('pages/colorpickers');var demoCropping = require('pages/cropping');var demoGrids = require('pages/grids');var demoCheckboxes = require('pages/checkboxes');var demoImages = require('pages/images');var demoLists = require('pages/lists');var demoMenubars = require('pages/menubars');var demoProgressmeters = require('pages/progressmeters');var demoRadiobuttons = require('pages/radiobuttons');var demoTabs = require('pages/tabs');// XULPeriodicTableexports.Main = function(aWindow){  xuljet.Component.call(this, aWindow);  this.message = 'Hello World!';    this.pages = [  { name: 'Forms', class: demoForms.Forms, source: 'forms' },  { name: 'Buttons', class: demoButtons.Buttons, source: 'buttons' },  { name: 'Box Layout', class: demoBoxLayout.BoxLayout, source: 'boxlayout' },  { name: 'Colorpickers', class: demoColorpickers.Colorpickers, source: 'colorpickers' },  { name: 'Cropping', class: demoCropping.Cropping, source: 'cropping' },  { name: 'Grids', class: demoGrids.Grids, source: 'grids' },  { name: 'Checkboxes', class: demoCheckboxes.Checkboxes, source: 'checkboxes' },  { name: 'Images', class: demoImages.Images, source: 'images' },  { name: 'Lists', class: demoLists.Lists, source: 'lists' },  { name: 'Menubars', class: demoMenubars.Menubars, source: 'menubars' },  { name: 'Progressmeters', class: demoProgressmeters.Progressmeters, source: 'progressmeters' },  { name: 'Radiobuttons', class: demoRadiobuttons.Radiobuttons, source: 'radiobuttons' },  { name: 'Tabs', class: demoTabs.Tabs, source: 'tabs' },  { name: 'Embedded', class: exports.Main, source: 'main' },  ];    this.child = new (this.pages[0].class)(aWindow);}xuljet.inherits(exports.Main, xuljet.Component);exports.Main.prototype.children = function(){  return [this.child]}exports.Main.prototype.sourceAddress = function(className){  return (xuljet.baseURI + 'pages/'+ className +'.js');}exports.Main.prototype.render = function(xul){      with (xul)  {  vbox({flex: 1},     insert(this.renderMenu),    hbox({flex: 1},     listbox({bind: 'list', style: 'width: 10em', onselect: function() {      var item = this.pages[this['list'].value];      var oldChild = this.child;      this.child = new item.class(this.window);      this.child.replace(oldChild);            this.refreshSection(this.ID("section"), function(_xul) {        _xul.iframe({id: this.ID("frame"), src: this.sourceAddress(item.source), flex: 1, type:'chrome'})})              }},            collect(this.pages, function(_xul, item, index) {      _xul.listitem({label: item.name, value: index})})    ),                splitter({collapse: 'before', resizebefore: 'closest', resizeafter: 'grow'}, grippy()),                    tabbox({flex: 1, selectedindex: 1},       tabs(      tab({label: 'Examples'}),      tab({label: 'Source'})),      tabpanels({flex: 1},      tabpanel(        this.child.rendered()      ),      tabpanel(        section({id: this.ID("section")},          iframe({id: this.ID("frame"), src: (this.sourceAddress((this.pages[0]).source)), flex: 1, type:'chrome'}))      )    ))),              insert(this.renderStatusBar)  )  }}  exports.Main.prototype.renderStatusBar = function(xul){  xul.statusbar(    xul.statusbarpanel({flex: 1, id: '_JSStatus', label: 'Ready...'})  );}    exports.Main.prototype.printExample = function(){  var html = new xuljet.HTMLCanvas(null, this);  with (html)  {  h1('List of XULJet demo pages');  table(    collect(this.pages, function(_html, page) {    with (_html)    {      tr(      td(page.name),      td(this.sourceAddress(page.source)));    }    })  );  }  with (html.SVG())  {  svg({width: '120px', height: '120px'},     circle({r: 50, cx: 60, cy: 60, style: 'stroke: red; fill: none; stroke-width: 20' }),    line({x1: 33, y1: 93, x2: 93, y2: 23, style: 'stroke: red; stroke-width: 20'})  )  }    this.print(html)}exports.Main.prototype.renderMenu = function(xul){  with (xul)  {    toolbox(    menubar(      menu({label: 'File', accesskey: 'f'},        menupopup(          menuitem({            label: 'New window...',             oncommand: function(){            (new xuljet.Window(new exports.Main(this.window), 'some new window')).open()}}),          menuitem({            label: 'New dialog...',             oncommand: function(){            var root = new demoForms.Forms();            var dialog = new xuljet.Dialog(root, 'some new window')            dialog.actions = {              ondialogaccept: function() {               root.processForm(root.ID("form"));              var s = new String();              for (prop in root.data)                 s += prop + ': ' + root.data[prop] + '\n'                        alert(s) },              ondialogcancel: function() { alert('canceled') }            }            dialog.open();            }}),          menuseparator(),          menuitem({            label: 'Page Setup...',             oncommand: function(){printing.utils.showPageSetup()}}),          menuitem({            label: 'Print...',             oncommand: function(){this.printExample()}}),          menuseparator(),          menuitem({label: 'Close', oncommand: 'window.close()'}) )),    menu({label: 'Components', accesskey: 'c'},        menupopup(          menuitem({            label: 'Refresh',             oncommand: function(){this.child.refresh()}}) ))          ))  }  }