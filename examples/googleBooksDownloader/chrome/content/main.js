require('closure-library');goog.require('goog.structs.Map');var xuljet = require('lib/xuljet');// for shorter callsvar str = xuljet.str;var lstr = xuljet.lstr;var Main = function(aWindow){  xuljet.Component.call(this, aWindow);    this.home = 'http://books.google.com/'  this.url = this.home;  this.image = null;  this.delay = 100;  this.step = 100;  this.padding = 5;  this.imagesMap = new goog.structs.Map();  this.pages = new goog.structs.Map();  this.atEnd = false;  this.destPath = null;      this.listener = xuljet.defaultProgressListener();}xuljet.inherits(Main, xuljet.Component);Main.prototype.render = function(xul){  with (xul)  {    commandset(      command({id: this.ID('go'), oncommand: function() {        this.url = this.addressBar.value;        this.browser.loadURI(this.url)      }}));         broadcasterset({id: this.ID('browserBroadcasters')},       broadcaster({id: this.ID('canGoBack'), bind: 'backBroadcaster', disabled: true}),      broadcaster({id: this.ID('canGoForward'), bind: 'forwardBroadcaster', disabled: true}),      broadcaster({id: this.ID('address'), bind: 'addressBroadcaster', value: this.url}));            vbox({flex: 1},      toolbox(        toolbar({align: 'center'},          toolbarbutton({label: '⬅', observes:  this.ID('canGoBack'), oncommand: function() {this.goBack()}}),                                toolbarbutton({label: '➡', observes:  this.ID('canGoForward'), oncommand: function() {this.goForward()}}),                                toolbarbutton({label: '↻', oncommand: function() {this.loadPage(this.url)}}),                                toolbarbutton({label: '⌂', oncommand: function() {this.loadPage(this.home)}}),                                textbox({flex: 1, bind: 'addressBar', observes: this.ID('address'), returncommand: this.ID('go')}),          button({label: str('go'), command: this.ID('go')}),                  button({label: str('downloadBook'), bind: 'processButton', disabled: true, oncommand: function() {this.processPage()}})),        toolbar({align: 'center'},             label({width: '100px', bind: 'stepLabel'}, this.stepText()),             scale({flex: 1,  min: 1, max: 1000, value: this.step, onchange: function(self) {              this.step =  self.value;              this.stepLabel.value = this.stepText();            }}),            label({width: '100px', bind: 'delayLabel'}, this.delayText()),             scale({flex: 1, min: 4, max: 20, value: Math.log(this.delay), onchange: function(self) {              this.delay = Math.round(Math.exp(self.value));              this.delayLabel.value = this.delayText();            }}))      ),            hbox({flex: 1},        browser({bind: 'browser', flex: 1, type: 'content', src: this.url}),        HTML().canvas({bind: 'canvas', style: 'display: none'})),               statusbar(        statusbarpanel({bind: 'status', flex: 1}),        statusbarpanel({bind: 'positionStatus', style: 'width: 12em', label: ''}),        spacer(),        progressmeter({bind: 'progressmeter', flex: 1, mode: 'determined', value: 90})      )    )        popupset(      popup({bind: 'popup'},        vbox(          section({id: this.ID('popupContent')}))))  }}Main.prototype.stepText = function(){  return lstr('step')+ ' ' + this.step.toString() + 'px'}Main.prototype.delayText = function(){  return lstr('delay')+ ' ' + (Math.round(this.delay/10)/100).toString() + 's'}Main.prototype.goBack = function(uri){  var webNavigation = this.browser.webNavigation;  if (webNavigation.canGoBack)      webNavigation.goBack();}Main.prototype.goForward = function(uri){  var webNavigation = this.browser.webNavigation;  if (webNavigation.canGoForward)      webNavigation.goForward();}Main.prototype.loadPage = function(uri){  var nsIWebNavigation = Components.interfaces.nsIWebNavigation;  this.browser.webNavigation.loadURI(uri, nsIWebNavigation.LOAD_FLAGS_NONE, null, null, null);  this.addressBroadcaster.setAttribute('value', uri);}Main.prototype.finishRendering = function(xul){  this.listener.pregressChanged = xuljet.bind(function(current, maximal) {    this.progressmeter.value = current / maximal * 100   }, this)  this.listener.onOverallFinish = xuljet.bind(function(current, maximal) {    this.progressmeter.value = 0;    var hasBook = this.pageHasBook()    this.processButton.disabled = !hasBook;    this.status.label = hasBook ? str('status.pageContainsBook') : str('status.noBookDetected');  }, this)  this.listener.onLocationChange = xuljet.bind(function(aWebProgress, aRequest, aLocation) {    this.addressBroadcaster.setAttribute('value', aRequest.name);    this.processButton.disabled = true;    this.status.label = str('status.loading');    this.url = aRequest.name;    var webNavigation = this.browser.webNavigation;    var backDisabled = (this.backBroadcaster.getAttribute('disabled') == 'true');    var forwardDisabled = (this.forwardBroadcaster.getAttribute('disabled') == 'true');    if (backDisabled == webNavigation.canGoBack)        this.backBroadcaster.setAttribute('disabled', !backDisabled);      if (forwardDisabled == webNavigation.canGoForward)        this.forwardBroadcaster.setAttribute('disabled', !forwardDisabled);    return 0;  }, this)  this.browser.addProgressListener( this.listener, Components.interfaces.nsIWebProgress.NOTIFY_ALL);}Main.prototype.saveCanvas = function(canvas, dirPath, pageNumber) {  var file = Components.classes['@mozilla.org/file/local;1'].                createInstance(Components.interfaces.nsILocalFile);    file.initWithPath(dirPath);    var str = pageNumber.toString();  while (str.length < this.padding)     str = '0' + str;     var fileName = 'page' + str + '.png'  file.append(fileName);  file.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 0666);   // create a data url from the canvas and then create URIs of the source and targets    var io = Components.classes['@mozilla.org/network/io-service;1']                     .getService(Components.interfaces.nsIIOService);  var source = io.newURI(canvas.toDataURL('image/png', ''), 'UTF8', null);  var target = io.newFileURI(file)      // prepare to save the canvas data  var persist = Components.classes['@mozilla.org/embedding/browser/nsWebBrowserPersist;1']                          .createInstance(Components.interfaces.nsIWebBrowserPersist);    persist.persistFlags = Components.interfaces.nsIWebBrowserPersist.PERSIST_FLAGS_REPLACE_EXISTING_FILES;  persist.persistFlags |= Components.interfaces.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;  persist.saveURI(source, null, null, null, null, file);    return (file.path)}       Main.prototype.processImage = function(image){  if (image.width < 100 || image.height < 100) {    image.tooSmall = true;    return;  }    var src = image.getAttribute('src');  var page = (src.match(/pg=\w+/g))[0];  page = (page.match(/\d+/g))[0];    image.saved = true;      if (!this.pages.containsKey(page)) {    this.pages.set(page, image)  } else return;    var canvas = this.canvas;  canvas.setAttribute('width', image.width);  canvas.setAttribute('height', image.height);  var ctx = canvas.getContext('2d');  ctx.drawImage(image,0,0);  ctx.save();      this.saveCanvas(canvas, this.destPath, page);}Main.prototype.findImages = function(){  var doc = this.browser.contentDocument;  var viewport = doc.getElementById('viewport');  var elements = viewport.getElementsByTagName('img')  // convert to array  var images = [];  for (var i = 0; i < elements.length; i++)    images.push(elements.item(i));  var newImages = [];    images.forEach(function(image) {    var src = image.getAttribute('src');    if (!this.imagesMap.containsKey(src)) {      this.imagesMap.set(src, image)      newImages.push(image);    }  }, this)    newImages.forEach(function(image) {    image.hasListener = true;    image.addEventListener('load', xuljet.bind(function() {       this.processImage(image);      this.checkFinish();    }, this), false);  }, this)  }Main.prototype.checkFinish = function(){  var withoutListener = [];  var waiting = [];    this.imagesMap.getValues().forEach(function (img) {    if (img.hasListener && img.saved)      return;    if (img.tooSmall)      return;    if (img.hasListener)      waiting.push(img);    else       withoutListener.push(img);  });    if (this.atEnd && (waiting.length == 0)) {    withoutListener.forEach(function(img) {      this.processImage(img);    }, this);    this.finish();    }}Main.prototype.finish = function(){  xuljet.systemPopup(str('applicationTitle'), str('status.finished'))   this.progressmeter.value = 0;  this.processButton.disabled = false;  this.status.label =  str('status.finished');}Main.prototype.pageHasBook = function(){  var doc = this.browser.contentDocument;  if (!doc) return false;  var viewport = doc.getElementById('viewport');  if (!viewport) return false;  var scrollDiv = viewport.firstChild;  if (!scrollDiv) return false;  var elements = viewport.getElementsByTagName('img');  if (elements.length == 0) return false;  return true;}Main.prototype.moveScroll = function(){  try {    var doc = this.browser.contentDocument;    var viewport = doc.getElementById('viewport');    var scrollDiv = viewport.firstChild;          var old = scrollDiv.scrollTop    scrollDiv.scrollTop = old + this.step;        this.progressmeter.value = scrollDiv.scrollTop / scrollDiv.scrollHeight * 100     this.findImages()        if (scrollDiv.scrollTop == old) {      this.atEnd = true;      this.checkFinish();        } else       setTimeout(xuljet.bind(this.moveScroll, this), this.delay)  } catch (error) {    this.alert(str('status.failed'));    this.progressmeter.value = 0;    this.processButton.disabled = false;      }}Main.prototype.openDirDialog = function(){  const nsIFilePicker = Components.interfaces.nsIFilePicker;  var filePicker = Components.classes['@mozilla.org/filepicker;1']                    .createInstance(Components.interfaces.nsIFilePicker);  filePicker.init(window, str('selectDirectory'), nsIFilePicker.modeGetFolder);  filePicker.displayDirectory = Components.classes['@mozilla.org/file/directory_service;1']                                  .getService(Components.interfaces.nsIProperties)                                  .get('Desk', Components.interfaces.nsIFile);    var ret = filePicker.show();  if (ret == nsIFilePicker.returnOK || ret == nsIFilePicker.returnReplace)     return filePicker.file.path;  return null;}Main.prototype.processPage = function(){  if (!this.pageHasBook) {    this.alert(str('status.noBookDetected'))    return  }      this.destPath = this.openDirDialog();  if (this.destPath)  {    var doc = this.browser.contentDocument;    var viewport = doc.getElementById('viewport');    var scrollDiv = viewport.firstChild;      scrollDiv.scrollTop = 0;    this.processButton.disabled = true;    this.status.label = str('downloading');        this.imagesMap = new goog.structs.Map();    this.pages = new goog.structs.Map();    this.atEnd = false;    setTimeout(xuljet.bind(this.moveScroll, this), this.delay)  }}function main(){  var rootComponent = new Main(window);  window.setTitle(str('applicationTitle'));  rootComponent.beMainWindowComponent();}